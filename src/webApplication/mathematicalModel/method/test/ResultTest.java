package webApplication.mathematicalModel.method.test;

import webApplication.mathematicalModel.Result;

public class ResultTest implements Result {
    private double[] methodSolution = {
            0.02749566085305775,
            0.05037440949547715,
            0.06746946776854099,
            0.0965832658621399,
            0.12166323328573965,
            0.16049349277113695,
            0.18059685016464583,
            0.2166822821221058,
            0.2532786434208375,
            0.2750844309019056,
            0.3173252748565976,
            0.3483474133081435,
            0.37014525095741707,
            0.40153404782159746,
            0.42813878889317947,
            0.4526632786745562,
            0.46054496675327367,
            0.45266283760351084,
            0.42813743899147305,
            0.4015308323490632,
            0.37013874414762593,
            0.34833596738810624,
            0.3173079666892893,
            0.27506383189275657,
            0.25326793744352993,
            0.2167220514960506,
            0.18079175328712266,
            0.16108535980023236,
            0.1231563201865052,
            0.09989283781133962,
            0.07387638212845436,
            0.06071129445610398
    };
    private double[] exactSolution = {
            0.0,
            0.03125,
            0.0625,
            0.09375,
            0.125,
            0.15625,
            0.1875,
            0.21875,
            0.25,
            0.28125,
            0.3125,
            0.34375,
            0.375,
            0.40625,
            0.4375,
            0.46875,
            0.5,
            0.46875,
            0.4375,
            0.40625,
            0.375,
            0.34375,
            0.3125,
            0.28125,
            0.25,
            0.21875,
            0.1875,
            0.15625,
            0.125,
            0.09375,
            0.0625,
            0.03125
    };
    private double[] rightparts = {
            0.019201284674625913,
            0.02364261909143502,
            0.028898909785354036,
            0.034771459385078016,
            0.04106392483669787,
            0.04762041045220025,
            0.05432179935593426,
            0.06107260104555611,
            0.06778874757415067,
            0.07438725368714513,
            0.08077629574750145,
            0.08684375611705836,
            0.09244203703426478,
            0.09736733282945521,
            0.1013358554557037,
            0.10397828952065905,
            0.1049172919245052,
            0.10397828952065905,
            0.10133585545570371,
            0.09736733282945517,
            0.09244203703426473,
            0.08684375611705837,
            0.08077629574750148,
            0.07438725368714515,
            0.06778874757415067,
            0.06107260104555611,
            0.054321799355934265,
            0.04762041045220026,
            0.04106392483669788,
            0.03477145938507801,
            0.02889890978535403,
            0.023642619091435023

    };
    private double[] points = {
            0.0,
            0.03125,
            0.0625,
            0.09375,
            0.125,
            0.15625,
            0.1875,
            0.21875,
            0.25,
            0.28125,
            0.3125,
            0.34375,
            0.375,
            0.40625,
            0.4375,
            0.46875,
            0.5,
            0.53125,
            0.5625,
            0.59375,
            0.625,
            0.65625,
            0.6875,
            0.71875,
            0.75,
            0.78125,
            0.8125,
            0.84375,
            0.875,
            0.90625,
            0.9375,
            0.96875

    };
    @Override
    public double[] getPoints() {
        return points;
    }

    @Override
    public double[] getRightParts() {
        return rightparts;
    }

    @Override
    public double[] getExactSolution() {
        return exactSolution;
    }

    @Override
    public double[] getMethodSolution() {
        return methodSolution;
    }

    @Override
    public int getNumberOfIterations() {
        return 21;
    }

    @Override
    public double getNorm1() {
        return 0.0013304945616626025;
    }

    @Override
    public double getNorm2() {
        return 0.28347977161690013;
    }

    @Override
    public double getNorm3() {
        return 0.013105723523906633;
    }
}
